class TenjiRecognition {
    constructor() {
        this.characters = this.initializeCharacterMap();
        this.gestureBuffer = [];
        this.maxRows = 3;
        this.init();
    }

    init() {
        document.addEventListener('gestureDetected', this.handleGesture.bind(this));
        document.addEventListener('touchend', this.handleTouchEnd.bind(this));
        console.log('Tenji recognition initialized');
    }

    initializeCharacterMap() {
        return {
            // A-gyo („ÅÇË°å) - Vowels
            '„ÅÇ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'none' }],
            '„ÅÑ': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'none' }],
            '„ÅÜ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'none' }],
            '„Åà': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'none' }],
            '„Åä': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'left' }],

            // Ka-gyo („ÅãË°å)
            '„Åã': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'left' }],
            '„Åç': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'left' }],
            '„Åè': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'left' }],
            '„Åë': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'left' }],
            '„Åì': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],

            // Sa-gyo („ÅïË°å)
            '„Åï': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Åó': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Åô': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'both' }],
            '„Åõ': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'both' }],
            '„Åù': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],

            // Ta-gyo („ÅüË°å)
            '„Åü': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'right' }],
            '„Å°': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'right' }],
            '„Å§': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Å¶': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Å®': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],

            // Na-gyo („Å™Ë°å)
            '„Å™': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'right' }],
            '„Å´': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'right' }],
            '„Å¨': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'right' }],
            '„Å≠': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'right' }],
            '„ÅÆ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],

            // Ha-gyo („ÅØË°å)
            '„ÅØ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],
            '„Å≤': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],
            '„Åµ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Å∏': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Åª': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],

            // Ma-gyo („ÅæË°å)
            '„Åæ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'both' }],
            '„Åø': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'both' }],
            '„ÇÄ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„ÇÅ': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„ÇÇ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }],

            // Ya-gyo („ÇÑË°å)
            '„ÇÑ': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'left' }],
            '„ÇÜ': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'left' }],
            '„Çà': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'both' }],

            // Ra-gyo („ÇâË°å)
            '„Çâ': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'none' }],
            '„Çä': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'none' }],
            '„Çã': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'none' }],
            '„Çå': [{ row: 1, pattern: 'both' }, { row: 2, pattern: 'both' }, { row: 3, pattern: 'none' }],
            '„Çç': [{ row: 1, pattern: 'right' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'left' }],

            // Wa-gyo („ÇèË°å)
            '„Çè': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'none' }],
            '„Çí': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'left' }],

            // Special Characters
            '„Çì': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'both' }],
            '„Å£': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'none' }],
            '„Éº': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„ÄÅ': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'none' }],
            '„ÄÇ': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'left' }],
            'Ôºü': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'right' }, { row: 3, pattern: 'both' }],
            'ÔºÅ': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'left' }, { row: 3, pattern: 'both' }],
            '„Éª': [{ row: 1, pattern: 'none' }, { row: 2, pattern: 'none' }, { row: 3, pattern: 'both' }]
        };
    }

    handleGesture(event) {
        const gesture = event.detail.gesture;
        let pattern;

        switch (gesture) {
            case 'SLIDE_LEFT':
                pattern = 'left';
                break;
            case 'SLIDE_RIGHT':
                pattern = 'right';
                break;
            case 'SLIDE_UP':
                pattern = 'both';
                break;
            case 'SLIDE_DOWN':
                pattern = 'none';
                break;
            case 'TAP':
                // TAP gestures are independent and don't affect tenji recognition
                return;
            default:
                return;
        }

        // Only process chained slide gestures for tenji recognition
        if (event.detail.chained && pattern) {
            this.gestureBuffer.push(pattern);
        }
    }

    handleTouchEnd() {
        if (this.gestureBuffer.length === 0) {
            return;
        }

        const lastThreeGestures = this.gestureBuffer.slice(-3);
        
        if (this.isNullificationPattern(lastThreeGestures)) {
            console.log('üö´ Input cleared');
            this.gestureBuffer = [];
            return;
        }

        if (lastThreeGestures.length === 3) {
            const pattern = lastThreeGestures.map((gesture, index) => ({
                row: index + 1,
                pattern: gesture
            }));
            
            this.recognizeAndDispatchCharacter(pattern);
        }

        this.gestureBuffer = [];
    }

    isNullificationPattern(gestures) {
        return gestures.length === 3 && 
               gestures.every(gesture => gesture === 'both');
    }

    recognizeAndDispatchCharacter(pattern) {
        const recognizedChar = this.recognizeCharacter(pattern);
        
        if (recognizedChar) {
            console.log('üéØ Recognized character:', recognizedChar);
            
            const tenjiEvent = new CustomEvent('tenjiCharacterRecognized', {
                detail: {
                    character: recognizedChar,
                    pattern: pattern.slice()
                }
            });
            document.dispatchEvent(tenjiEvent);
        } else {
            console.log('‚ùå Pattern not recognized:', pattern);
        }
    }

    recognizeCharacter(inputPattern) {
        for (const [character, expectedPattern] of Object.entries(this.characters)) {
            if (this.patternsMatch(inputPattern, expectedPattern)) {
                return character;
            }
        }
        return null;
    }

    patternsMatch(inputPattern, expectedPattern) {
        if (inputPattern.length !== expectedPattern.length) {
            return false;
        }
        
        for (let i = 0; i < inputPattern.length; i++) {
            if (inputPattern[i].pattern !== expectedPattern[i].pattern) {
                return false;
            }
        }
        
        return true;
    }

    getGestureBuffer() {
        return this.gestureBuffer.slice();
    }

    clearGestureBuffer() {
        this.gestureBuffer = [];
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new TenjiRecognition();
});